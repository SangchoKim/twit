{"ast":null,"code":"var __jsx = React.createElement;\nimport { Button, Form, Input } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({\n  post\n}) => {\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const onSubmitComment = useCallback(e => {\n    // post창\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\"));\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["D:\\NodeBird\\front\\containers\\CommentForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","useState","useSelector","useDispatch","ADD_COMMENT_REQUEST","CommentForm","post","commentText","setCommentText","commentAdded","isAddingComment","state","me","user","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","content","onChangeCommentText","target","value"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEQ,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoCR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACL,IAAhB,CAArD;AACA,QAAM;AAAEM,IAAAA;AAAF,MAASV,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACE,IAAhB,CAA1B;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AAEA,QAAMY,eAAe,GAAGhB,WAAW,CAAEiB,CAAD,IAAO;AAAE;AAC3CA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACL,EAAL,EAAS;AACP,aAAOM,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,WAAOJ,QAAQ,CAAC;AACdK,MAAAA,IAAI,EAAEf,mBADQ;AAEdgB,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEf,IAAI,CAACgB,EADT;AAEJC,QAAAA,OAAO,EAAEhB;AAFL;AAFQ,KAAD,CAAf;AAOD,GAZkC,EAYhC,CAACK,EAAE,IAAIA,EAAE,CAACU,EAAV,EAAaf,WAAb,CAZgC,CAAnC;AAcAP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFQ,EAEN,CAACC,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,QAAMe,mBAAmB,GAAGzB,WAAW,CAAEiB,CAAD,IAAO;AAC7CR,IAAAA,cAAc,CAACQ,CAAC,CAACS,MAAF,CAASC,KAAV,CAAd;AACD,GAFsC,EAEpC,EAFoC,CAAvC;AAGA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEX;AAAhB,KACE,MAAC,IAAD,CAAM,IAAN,QACE,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAER,WAAhC;AAA6C,IAAA,QAAQ,EAAEiB;AAAvD,IADF,CADF,EAIE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEd;AAAlD,oBAJF,CADF;AAQD,CAnCD;;AAyCA,eAAeL,WAAf","sourcesContent":["import { Button, Form, Input } from 'antd';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const [commentText, setCommentText] = useState('');\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const { me } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmitComment = useCallback((e) => { // post창\r\n    e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id,commentText]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => { \r\n    setCommentText(e.target.value);\r\n  }, []);\r\n  return (\r\n    <Form onSubmit={onSubmitComment}>\r\n      <Form.Item>\r\n        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n      </Form.Item>\r\n      <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}