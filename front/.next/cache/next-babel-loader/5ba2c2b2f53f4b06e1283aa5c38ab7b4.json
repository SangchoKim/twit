{"ast":null,"code":"import { all, fork, takeLatest, put, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  console.log(\"addPost\", action.data);\n\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer의 데이터를 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user reducer의 데이터를 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  // throttle = 한번 호출 -> 2초 동안에는 같은 것이 호출되지 않게 막아주는 이펙트\n  yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  console.log(\"posts\", action.data);\n\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    console.log(\"formData\", action.data);\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction loadPostAPI(postId) {\n  return axios.get(`/post/${postId}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["D:\\NodeBird\\front\\sagas\\post.js"],"names":["all","fork","takeLatest","put","throttle","call","axios","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","addPost","action","console","log","data","result","type","id","e","error","watchAddPost","loadMainPostsAPI","lastId","limit","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","removePostAPI","removePost","REMOVE_POST_OF_ME","watchRemovePost","loadPostAPI","loadPost","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE, \r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  ADD_POST_FAILURE, \r\n  ADD_POST_REQUEST, \r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  LOAD_COMMENTS_FAILURE,\r\n  LOAD_COMMENTS_REQUEST,\r\n  LOAD_COMMENTS_SUCCESS, \r\n  LOAD_MAIN_POSTS_FAILURE, \r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  RETWEET_FAILURE, \r\n  RETWEET_REQUEST, \r\n  RETWEET_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  LOAD_POST_SUCCESS, \r\n  LOAD_POST_FAILURE, \r\n  LOAD_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME} from '../reducers/user';\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  console.log(\"addPost\",action.data);\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({ // post reducer의 데이터를 수정\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({ // user reducer의 데이터를 수정\r\n      type:ADD_POST_TO_ME,\r\n      data:result.data.id,\r\n    })\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI( lastId = 0, limit = 10) {\r\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\r\n}\r\n\r\nfunction* loadMainPosts(action) {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  // throttle = 한번 호출 -> 2초 동안에는 같은 것이 호출되지 않게 막아주는 이펙트\r\n  yield throttle(2000,LOAD_MAIN_POSTS_REQUEST, loadMainPosts); \r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag, lastId) {\r\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id ) {\r\n  return axios.get(`/user/${id||0}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  console.log(\"posts\",action.data);\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, {content:data.content},\r\n    {withCredentials:true},\r\n  )\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n  return axios.post('/post/images', formData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    console.log(\"formData\",action.data);\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}/like`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n  return axios.post(`/post/${postId}/retweet`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e,\r\n    });\r\n    alert(e.response && e.response.data);\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction removePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction loadPostAPI(postId) {\r\n  return axios.get(`/post/${postId}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchRetweet),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}