{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../containers/PostCard';\n\nvar Hashtag = function Hashtag(_ref) {\n  var tag = _ref.tag;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost;\n\n  var onScroll = useCallback(function () {\n    // scrollY = 스크롤 내린 거리 \n    // clientHeight = 화면 높이\n    // scrollHeight: 전체 화면 길이\n    // 전체 화면 까지 스크롤이 도착하기 전 300 정도가 남았을 때 불러오기 \n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        var lastId = mainPosts[mainPosts.length - 1].id && mainPosts[mainPosts.length - 1].id; // 마지막 게시글의 id 추출\n        // if (!countRef.current.includes(lastId)) {\n\n        dispatch({\n          type: LOAD_HASHTAG_POSTS_REQUEST,\n          lastId: lastId,\n          data: tag\n        }); // countRef.current.push(lastId);\n        // }\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n};\n\nHashtag.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var tag;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 파라미터로 ctx가 들어옴 // 2번으로 실행\n            tag = context.query.tag;\n            console.log('hashtag getInitalProps', tag); // ctx 안에 있는 tag 뽑아냄 \n\n            context.store.dispatch({\n              type: LOAD_HASHTAG_POSTS_REQUEST,\n              data: tag\n            });\n            return _context.abrupt(\"return\", {\n              tag: tag // 리턴하면 _app.js pageProps에 담김\n\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Hashtag;","map":{"version":3,"sources":["D:\\NodeBird\\front\\pages\\hashtag.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","PostCard","Hashtag","tag","dispatch","state","post","mainPosts","hasMorePost","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","data","addEventListener","removeEventListener","map","c","getInitialProps","context","query","console","log","store"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAW;AAAA,MAATC,GAAS,QAATA,GAAS;AAEzB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAFyB,qBAGUC,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHrB;AAAA,MAGjBC,SAHiB,gBAGjBA,SAHiB;AAAA,MAGNC,WAHM,gBAGNA,WAHM;;AAKzB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,YAAM;AACjC;AACA;AACA;AACA;AACA,QAAIa,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACxG,UAAIP,WAAJ,EAAiB;AACf,YAAMQ,MAAM,GAAGT,SAAS,CAACA,SAAS,CAACU,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAAhC,IAAsCX,SAAS,CAACA,SAAS,CAACU,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAArF,CADe,CAC0E;AACzF;;AACEd,QAAAA,QAAQ,CAAC;AACPe,UAAAA,IAAI,EAAEnB,0BADC;AAEPgB,UAAAA,MAAM,EAANA,MAFO;AAGPI,UAAAA,IAAI,EAACjB;AAHE,SAAD,CAAR,CAHa,CAQb;AACF;AACD;AACF;AACF,GAlB2B,EAkBzB,CAACK,WAAD,EAAcD,SAAS,CAACU,MAAxB,CAlByB,CAA5B;AAoBArB,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCZ,QAAlC;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCb,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACF,SAAS,CAACU,MAAX,CALM,CAAT;AAOA,SACE,mBACGV,SAAS,CAACgB,GAAV,CAAc,UAAAC,CAAC;AAAA,WACd,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACN,EAAjB;AAAqB,MAAA,IAAI,EAAEM;AAA3B,MADc;AAAA,GAAf,CADH,CADF;AAOD,CAvCD;;AAyCAtB,OAAO,CAACuB,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;AACrCvB,YAAAA,GADgB,GACVuB,OAAO,CAACC,KAAR,CAAcxB,GADJ;AAEtByB,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC1B,GAAtC,EAFsB,CAEsB;;AAC5CuB,YAAAA,OAAO,CAACI,KAAR,CAAc1B,QAAd,CAAuB;AACrBe,cAAAA,IAAI,EAAEnB,0BADe;AAErBoB,cAAAA,IAAI,EAAEjB;AAFe,aAAvB;AAHsB,6CAOhB;AAACA,cAAAA,GAAG,EAAHA,GAAD,CAAM;;AAAN,aAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AASA,eAAeD,OAAf","sourcesContent":["import React, { useEffect,useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\nimport PostCard from '../containers/PostCard';\r\n\r\nconst Hashtag = ({tag}) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\r\n\r\n  const onScroll = useCallback(() => {\r\n    // scrollY = 스크롤 내린 거리 \r\n    // clientHeight = 화면 높이\r\n    // scrollHeight: 전체 화면 길이\r\n    // 전체 화면 까지 스크롤이 도착하기 전 300 정도가 남았을 때 불러오기 \r\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n      if (hasMorePost) {\r\n        const lastId = mainPosts[mainPosts.length - 1].id && mainPosts[mainPosts.length - 1].id; // 마지막 게시글의 id 추출\r\n        // if (!countRef.current.includes(lastId)) {\r\n          dispatch({\r\n            type: LOAD_HASHTAG_POSTS_REQUEST,\r\n            lastId,\r\n            data:tag,\r\n          });\r\n          // countRef.current.push(lastId);\r\n        // }\r\n      }\r\n    }\r\n  }, [hasMorePost, mainPosts.length]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [mainPosts.length]);\r\n\r\n  return (\r\n    <div>\r\n      {mainPosts.map(c => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nHashtag.getInitialProps = async (context) => { // 파라미터로 ctx가 들어옴 // 2번으로 실행\r\n    const tag = context.query.tag;  \r\n    console.log('hashtag getInitalProps', tag); // ctx 안에 있는 tag 뽑아냄 \r\n    context.store.dispatch({\r\n      type: LOAD_HASHTAG_POSTS_REQUEST,\r\n      data: tag,\r\n    });\r\n    return{tag} // 리턴하면 _app.js pageProps에 담김\r\n}\r\nexport default Hashtag;"]},"metadata":{},"sourceType":"module"}