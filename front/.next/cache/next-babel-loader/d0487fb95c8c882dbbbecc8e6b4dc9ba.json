{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper'; // next와 리덕스 연결\n\nimport withReduxSaga from 'next-redux-saga'; // next와 리덕스 사가 연결\n\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  // 3번으로 실행\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    charset: \"UTF-8\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; // getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때 \n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때\n\nNodeBird.getInitialProps = async context => {\n  // next 에서 내려주는 context // 1번으로 실행\n  console.log(context);\n  const {\n    ctx,\n    Component\n  } = context; // context 안에는 Component 와 ctx 가 들어있음\n\n  let pageProps = {};\n  const state = ctx.store.getState(); // ctx 안에 리덕스의 store가 들어 있음 -> store.getState 로 사용 가능 \n\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // ctx 안에 리덕스의 req도  들어 있어 cookie 빼올 수 있음 \n\n  axios.defaults.headers.Cookie = '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST // SSR AppLayout 유저 정보 가져오기\n\n    });\n  }\n\n  if (Component.getInitialProps) {\n    // Component안에 getInitialProps 있는 경우\n    pageProps = await Component.getInitialProps(ctx); // 각 componenet 안에서 리턴 받은 값을 pageProps에 넣음\n  }\n\n  return {\n    pageProps\n  }; // nodeBird props로 넘김 \n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 추가 필요 SSR 할때 \n\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["D:\\NodeBird\\front\\pages\\_app.js"],"names":["React","Head","PropTypes","withRedux","withReduxSaga","applyMiddleware","compose","createStore","Provider","createSagaMiddleware","axios","AppLayout","reducer","rootSaga","LOAD_USER_REQUEST","NodeBird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport withRedux from 'next-redux-wrapper'; // next와 리덕스 연결\r\nimport withReduxSaga from 'next-redux-saga'; // next와 리덕스 사가 연결\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport axios from 'axios';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst NodeBird = ({ Component, store , pageProps }) => {  // 3번으로 실행\r\n  return (\r\n    <Provider store={store}>\r\n      <Head>\r\n        <title>NodeBird</title>\r\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\r\n        <link rel=\"stylesheet\" type=\"text/css\" charset=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\r\n  <     link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\r\n      </Head>\r\n      <AppLayout>\r\n        {/* 각각의 componenet 에 pageProps 넣어줌  */}\r\n        <Component {...pageProps}/> \r\n      </AppLayout>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nNodeBird.propTypes = {\r\n  Component: PropTypes.elementType.isRequired,\r\n  store: PropTypes.object.isRequired,\r\n  pageProps: PropTypes.object.isRequired,\r\n};\r\n\r\n// getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\r\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때 \r\n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때\r\nNodeBird.getInitialProps = async (context) => { // next 에서 내려주는 context // 1번으로 실행\r\n  console.log(context);\r\n  const { ctx, Component } = context;  // context 안에는 Component 와 ctx 가 들어있음\r\n  let pageProps = {};\r\n  const state = ctx.store.getState(); // ctx 안에 리덕스의 store가 들어 있음 -> store.getState 로 사용 가능 \r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // ctx 안에 리덕스의 req도  들어 있어 cookie 빼올 수 있음 \r\n  axios.defaults.headers.Cookie = '';\r\n  if (ctx.isServer && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  if (!state.user.me) {\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST, // SSR AppLayout 유저 정보 가져오기\r\n    });\r\n  }\r\n\r\n  if (Component.getInitialProps) { // Component안에 getInitialProps 있는 경우\r\n    pageProps = await Component.getInitialProps(ctx); // 각 componenet 안에서 리턴 받은 값을 pageProps에 넣음\r\n  }\r\n  return { pageProps }; // nodeBird props로 넘김 \r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : compose(\r\n      applyMiddleware(...middlewares),\r\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n    );\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 추가 필요 SSR 할때 \r\n  return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));"]},"metadata":{},"sourceType":"module"}