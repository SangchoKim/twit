{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport PostCard from '../containers/PostCard';\n\nconst User = () => {\n  // _app.js에서  props로 내려온 값은 id로 받음 // 4번으로 실행\n  const dispatch = useDispatch();\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c\n  })));\n};\n\nUser.prototype = {\n  id: PropTypes.number.isRequired // getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\n  // 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때\n  // 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때 \n\n};\n\nUser.getInitialProps = async context => {\n  // 파라미터로 ctx가 들어옴  // 2번으로 실행\n  const id = _parseInt(context.query.id, 10);\n\n  console.log('User getInitalProps', id); // ctx 안에 있는 tag 뽑아냄\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: id\n  });\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: id\n  });\n  return {\n    id // 리턴하면 _app.js pageProps에 담김\n\n  };\n};\n\nexport default User;","map":{"version":3,"sources":["D:\\NodeBird\\front\\pages\\user.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","Avatar","Card","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","PostCard","User","dispatch","mainPosts","state","post","userInfo","user","Posts","Followings","Followers","nickname","map","c","id","prototype","number","isRequired","getInitialProps","context","query","console","log","store","type","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAE;AACnB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAgBR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeX,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAhC;AAGA,SACE,mBACGD,QAAQ,GAEL,MAAC,IAAD;AACE,IAAA,OAAO,EAAE,CACP;AAAK,MAAA,GAAG,EAAC;AAAT,uBAEE,iBAFF,EAGGA,QAAQ,CAACE,KAHZ,CADO,EAMP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGF,QAAQ,CAACG,UAHZ,CANO,EAWP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGH,QAAQ,CAACI,SAHZ,CAXO;AADX,KAmBE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EAAE,MAAC,MAAD,QAASJ,QAAQ,CAACK,QAAT,CAAkB,CAAlB,CAAT,CADV;AAEE,IAAA,KAAK,EAAEL,QAAQ,CAACK;AAFlB,IAnBF,CAFK,GA2BL,IA5BN,EA6BGR,SAAS,CAACS,GAAV,CAAcC,CAAC,IACd,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,IAAA,IAAI,EAAED;AAA3B,IADD,CA7BH,CADF;AAmCD,CAzCD;;AA2CAZ,IAAI,CAACc,SAAL,GAAe;AACXD,EAAAA,EAAE,EAAErB,SAAS,CAACuB,MAAV,CAAiBC,UADV,CAIf;AACA;AACA;;AANe,CAAf;;AAOAhB,IAAI,CAACiB,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AAAE;AACxC,QAAML,EAAE,GAAG,UAASK,OAAO,CAACC,KAAR,CAAcN,EAAvB,EAA2B,EAA3B,CAAX;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCR,EAAnC,EAFsC,CAEE;;AACxCK,EAAAA,OAAO,CAACI,KAAR,CAAcrB,QAAd,CAAuB;AACrBsB,IAAAA,IAAI,EAAEzB,iBADe;AAErB0B,IAAAA,IAAI,EAAEX;AAFe,GAAvB;AAIAK,EAAAA,OAAO,CAACI,KAAR,CAAcrB,QAAd,CAAuB;AACrBsB,IAAAA,IAAI,EAAE1B,uBADe;AAErB2B,IAAAA,IAAI,EAAEX;AAFe,GAAvB;AAIA,SAAM;AAACA,IAAAA,EAAD,CAAK;;AAAL,GAAN;AACH,CAZD;;AAcA,eAAeb,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport PostCard from '../containers/PostCard';\r\n\r\nconst User = () => { // _app.js에서  props로 내려온 값은 id로 받음 // 4번으로 실행\r\n  const dispatch = useDispatch();\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const { userInfo } = useSelector(state => state.user);\r\n \r\n  \r\n  return (\r\n    <div>\r\n      {userInfo\r\n        ? (\r\n          <Card\r\n            actions={[\r\n              <div key=\"twit\">\r\n                짹짹\r\n                <br />\r\n                {userInfo.Posts}\r\n              </div>,\r\n              <div key=\"following\">\r\n                팔로잉\r\n                <br />\r\n                {userInfo.Followings}\r\n              </div>,\r\n              <div key=\"follower\">\r\n                팔로워\r\n                <br />\r\n                {userInfo.Followers}\r\n              </div>,\r\n            ]}\r\n          >\r\n            <Card.Meta\r\n              avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n              title={userInfo.nickname}\r\n            />\r\n          </Card>\r\n        )\r\n        : null}\r\n      {mainPosts.map(c => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nUser.prototype={\r\n    id: PropTypes.number.isRequired,\r\n}\r\n\r\n// getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\r\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때\r\n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때 \r\nUser.getInitialProps = async (context) => { // 파라미터로 ctx가 들어옴  // 2번으로 실행\r\n    const id = parseInt(context.query.id, 10);  \r\n    console.log('User getInitalProps', id); // ctx 안에 있는 tag 뽑아냄\r\n    context.store.dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n      data: id,\r\n    });\r\n    context.store.dispatch({\r\n      type: LOAD_USER_POSTS_REQUEST,\r\n      data: id,\r\n    });\r\n    return{id} // 리턴하면 _app.js pageProps에 담김\r\n};\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}