{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport { LOAD_POST_REQUEST } from '../reducers/post'; // 검색엔진이 잘 가져갈 수 있도록 만드는 법 \n// 1. meta tag 안에 html 속성을 기입하는 것\n// 2. 스카마.org 을 적용하여 html 속성들을 넣어주는 것 \n\nvar Post = function Post(_ref) {\n  var id = _ref.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost;\n\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"),\n    description: singlePost.content,\n    meta: [{\n      name: 'description',\n      content: singlePost.content\n    }, {\n      property: 'og:title',\n      content: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n    }, {\n      property: 'og:description',\n      content: singlePost.content\n    }, {\n      property: 'og:image',\n      content: singlePost.Images[0] && \"http://localhost:2323/\".concat(singlePost.Images[0].src)\n    }, {\n      property: 'og:url',\n      content: \"http://localhost:3060/post/\".concat(id)\n    }]\n  }), __jsx(\"div\", {\n    itemScope: \"content\"\n  }, singlePost.content), __jsx(\"div\", {\n    itemScope: \"author\"\n  }, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: \"http://localhost:2323/\".concat(singlePost.Images[0].src)\n  })));\n};\n\nPost.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            context.store.dispatch({\n              type: LOAD_POST_REQUEST,\n              data: context.query.id\n            });\n            return _context.abrupt(\"return\", {\n              id: _parseInt(context.query.id, 10)\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Post;","map":{"version":3,"sources":["D:\\NodeBird\\front\\pages\\post.js"],"names":["React","useSelector","Helmet","LOAD_POST_REQUEST","Post","id","state","post","singlePost","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","data","query"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,iBAAT,QAAkC,kBAAlC,C,CAEA;AACA;AACA;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,qBACAJ,WAAW,CAAC,UAAAK,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CADX;AAAA,MACfC,UADe,gBACfA,UADe;;AAEvB,SACE,4BACE,MAAC,MAAD;AACE,IAAA,KAAK,YAAKA,UAAU,CAACC,IAAX,CAAgBC,QAArB,wBADP;AAEE,IAAA,WAAW,EAAEF,UAAU,CAACG,OAF1B;AAGE,IAAA,IAAI,EAAE,CAAC;AACLC,MAAAA,IAAI,EAAE,aADD;AACgBD,MAAAA,OAAO,EAAEH,UAAU,CAACG;AADpC,KAAD,EAEH;AACDE,MAAAA,QAAQ,EAAE,UADT;AACqBF,MAAAA,OAAO,YAAKH,UAAU,CAACC,IAAX,CAAgBC,QAArB;AAD5B,KAFG,EAIH;AACDG,MAAAA,QAAQ,EAAE,gBADT;AAC2BF,MAAAA,OAAO,EAAEH,UAAU,CAACG;AAD/C,KAJG,EAMH;AACDE,MAAAA,QAAQ,EAAE,UADT;AACqBF,MAAAA,OAAO,EAAEH,UAAU,CAACM,MAAX,CAAkB,CAAlB,qCAAiDN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAAtE;AAD9B,KANG,EAQH;AACDF,MAAAA,QAAQ,EAAE,QADT;AACmBF,MAAAA,OAAO,uCAAgCN,EAAhC;AAD1B,KARG;AAHR,IADF,EAgBE;AAAK,IAAA,SAAS,EAAC;AAAf,KAA0BG,UAAU,CAACG,OAArC,CAhBF,EAiBE;AAAK,IAAA,SAAS,EAAC;AAAf,KAAyBH,UAAU,CAACC,IAAX,CAAgBC,QAAzC,CAjBF,EAkBE,mBACGF,UAAU,CAACM,MAAX,CAAkB,CAAlB,KAAwB;AAAK,IAAA,GAAG,kCAA2BN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAAhD;AAAR,IAD3B,CAlBF,CADF;AAwBD,CA1BD;;AA4BAX,IAAI,CAACY,eAAL;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACrBA,YAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACrBC,cAAAA,IAAI,EAAEjB,iBADe;AAErBkB,cAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAcjB;AAFC,aAAvB;AADqB,6CAKd;AAAEA,cAAAA,EAAE,EAAE,UAASY,OAAO,CAACK,KAAR,CAAcjB,EAAvB,EAA2B,EAA3B;AAAN,aALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAYA,eAAeD,IAAf","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Helmet from 'react-helmet';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\n\r\n// 검색엔진이 잘 가져갈 수 있도록 만드는 법 \r\n// 1. meta tag 안에 html 속성을 기입하는 것\r\n// 2. 스카마.org 을 적용하여 html 속성들을 넣어주는 것 \r\nconst Post = ({ id }) => {\r\n  const { singlePost } = useSelector(state => state.post);\r\n  return (\r\n    <>\r\n      <Helmet\r\n        title={`${singlePost.User.nickname}님의 글`}\r\n        description={singlePost.content}\r\n        meta={[{\r\n          name: 'description', content: singlePost.content,\r\n        }, {\r\n          property: 'og:title', content: `${singlePost.User.nickname}님의 게시글`,\r\n        }, {\r\n          property: 'og:description', content: singlePost.content,\r\n        }, {\r\n          property: 'og:image', content: singlePost.Images[0] && `http://localhost:2323/${singlePost.Images[0].src}`,\r\n        }, {\r\n          property: 'og:url', content: `http://localhost:3060/post/${id}`,\r\n        }]}\r\n      />\r\n      <div itemScope=\"content\">{singlePost.content}</div>\r\n      <div itemScope=\"author\">{singlePost.User.nickname}</div>\r\n      <div>\r\n        {singlePost.Images[0] && <img src={`http://localhost:2323/${singlePost.Images[0].src}`} />}\r\n      </div>  \r\n    </>\r\n  );\r\n};\r\n\r\nPost.getInitialProps = async (context) => {\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data: context.query.id,\r\n  });\r\n  return { id: parseInt(context.query.id, 10) };\r\n};\r\n\r\nPost.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}