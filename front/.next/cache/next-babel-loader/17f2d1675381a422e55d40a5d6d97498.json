{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removePost),\n    _marked22 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRemovePost),\n    _marked23 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadPost),\n    _marked24 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadPost),\n    _marked25 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"addPost\", action.data);\n          _context.prev = 1;\n          _context.next = 4;\n          return call(addPostAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            // post reducer의 데이터를 수정\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            // user reducer의 데이터를 수정\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadMainPostsAPI() {\n  var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  return axios.get(\"/posts?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag), \"?lastId=\").concat(lastId, \"&limit=10\"));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id || 0, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          console.log(\"posts\", action.data);\n          _context7.prev = 1;\n          _context7.next = 4;\n          return call(loadUserPostsAPI, action.data);\n\n        case 4:\n          result = _context7.sent;\n          _context7.next = 7;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context7.next = 13;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](1);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[1, 9]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          console.log(\"formData\", action.data);\n          _context13.next = 4;\n          return call(uploadImagesAPI, action.data);\n\n        case 4:\n          result = _context13.sent;\n          _context13.next = 7;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context13.next = 14;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 14;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 9]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 14;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n          alert(_context19.t0.response && _context19.t0.response.data);\n\n        case 14:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction removePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId), {\n    withCredentials: true\n  });\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          _context21.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context21.sent;\n          _context21.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context21.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context21.next = 15;\n          break;\n\n        case 10:\n          _context21.prev = 10;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n          _context21.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context21.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21, null, [[0, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction loadPostAPI(postId) {\n  return axios.get(\"/post/\".concat(postId));\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.prev = 0;\n          _context23.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context23.sent;\n          _context23.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context23.next = 13;\n          break;\n\n        case 8:\n          _context23.prev = 8;\n          _context23.t0 = _context23[\"catch\"](0);\n          console.error(_context23.t0);\n          _context23.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context23.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23, null, [[0, 8]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}","map":{"version":3,"sources":["D:\\NodeBird\\front\\sagas\\post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","addComment","watchAddComment","loadComments","watchLoadComments","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","removePost","watchRemovePost","loadPost","watchLoadPost","postSaga","all","fork","takeLatest","put","throttle","call","axios","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","action","console","log","data","result","type","id","error","loadMainPostsAPI","lastId","limit","get","loadHashtagPostsAPI","tag","encodeURIComponent","loadUserPostsAPI","addCommentAPI","postId","content","comment","loadCommentsAPI","comments","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","retweetAPI","alert","response","removePostAPI","REMOVE_POST_OF_ME","loadPostAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE, \r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  ADD_POST_FAILURE, \r\n  ADD_POST_REQUEST, \r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  LOAD_COMMENTS_FAILURE,\r\n  LOAD_COMMENTS_REQUEST,\r\n  LOAD_COMMENTS_SUCCESS, \r\n  LOAD_MAIN_POSTS_FAILURE, \r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  RETWEET_FAILURE, \r\n  RETWEET_REQUEST, \r\n  RETWEET_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  LOAD_POST_SUCCESS, \r\n  LOAD_POST_FAILURE, \r\n  LOAD_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME} from '../reducers/user';\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  console.log(\"addPost\",action.data);\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({ // post reducer의 데이터를 수정\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({ // user reducer의 데이터를 수정\r\n      type:ADD_POST_TO_ME,\r\n      data:result.data.id,\r\n    })\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI( lastId = 0, limit = 10) {\r\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\r\n}\r\n\r\nfunction* loadMainPosts(action) {\r\n  try {\r\n    const result = yield call(loadMainPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  // throttle = 한번 호출 -> 2초 동안에는 같은 것이 호출되지 않게 막아주는 이펙트\r\n  yield throttle(2000,LOAD_MAIN_POSTS_REQUEST, loadMainPosts); \r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag, lastId) {\r\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id ) {\r\n  return axios.get(`/user/${id||0}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  console.log(\"posts\",action.data);\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, {content:data.content},\r\n    {withCredentials:true},\r\n  )\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n  return axios.post('/post/images', formData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    console.log(\"formData\",action.data);\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}/like`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n  return axios.post(`/post/${postId}/retweet`, {}, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e,\r\n    });\r\n    alert(e.response && e.response.data);\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction removePostAPI(postId) {\r\n  return axios.delete(`/post/${postId}`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction loadPostAPI(postId) {\r\n  return axios.get(`/post/${postId}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchRetweet),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}