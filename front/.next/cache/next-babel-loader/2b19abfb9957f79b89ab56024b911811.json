{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    // 댓글\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    // post창\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    // 좋아요\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    // 리트윗\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card // 리트윗을 한 경우\n  , {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) // a tag x -> Link\n\n  })) : __jsx(Card.Meta, {\n    // 리트윗을 안 한 경우\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) // a tag x -> Link\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["D:\\NodeBird\\front\\components\\PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Form","Input","List","Comment","Link","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","PostImages","PostCardContent","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","createdAt","Images","RetweetId","User","nickname","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST,UNLIKE_POST_REQUEST,LIKE_POST_REQUEST,RETWEET_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onToggleComment = useCallback(() => { // 댓글\r\n    setCommentFormOpened(prev => !prev);\r\n    if(!commentFormOpened){\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) => { // post창\r\n    e.preventDefault();\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id,commentText]);\r\n\r\n  useEffect(() => {\r\n    setCommentText('');\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback((e) => { \r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  const onToggleLike = useCallback(() => { // 좋아요\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다!');\r\n    }\r\n    if (liked) { // 좋아요 누른 상태\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    } else { // 좋아요 안 누른 상태\r\n      dispatch({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, [me && me.id, post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(() => { // 리트윗\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [me && me.id, post && post.id]);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n          <Icon type=\"heart\" \r\n                key=\"heart\" \r\n                onClick={onToggleLike} \r\n                theme={liked?'twoTone':'outlined'}\r\n                twoToneColor ='#eb2f96'\r\n                />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        {post.RetweetId && post.Retweet  \r\n          ? (\r\n            <Card // 리트윗을 한 경우\r\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n            >\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link\r\n                    href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\r\n                    as={`/user/${post.Retweet.User.id}`}\r\n                  >\r\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardContent postData={post.Retweet.content} />} // a tag x -> Link\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <Card.Meta // 리트윗을 안 한 경우\r\n              avatar={(\r\n                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                </Link>\r\n              )}\r\n              title={post.User.nickname}\r\n              description={<PostCardContent postData={post.content} />} // a tag x -> Link\r\n            />\r\n          )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query:{id:item.User.id }}} as={`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}