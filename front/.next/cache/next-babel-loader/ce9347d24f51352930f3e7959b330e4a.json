{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분 \n  return axios.post('/user/login', loginData, {\n    withCredentials: true // 쿠기를 다른 도메인으로 보낼때 ->도메인이 다르기떄문에 설정 필요 (front)\n\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    console.log(result);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    // loginAPI 실패\n    console.log(error);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUPdata) {\n  // 서버에 요청을 보내는 부분 \n  return axios.post('/user/', signUPdata);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    // loginAPI 실패\n    console.log(error);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:\\NodeBird\\front\\sagas\\user.js"],"names":["all","fork","takeLatest","call","put","delay","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","axios","loginAPI","loginData","post","withCredentials","login","action","result","data","console","log","type","error","watchLogin","signUpAPI","signUPdata","signUp","watchSignUp","logOutAPI","logOut","e","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,QAAsD,oBAAtD;AACA,SACIC,iBADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,eARJ,EASIC,eATJ,EAUIC,eAVJ,EAWIC,eAXJ,EAYIC,eAZJ,QAaS,kBAbT;AAcE,OAAOC,KAAP,MAAkB,OAAlB;;AAEF,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB;AACA,SAAOF,KAAK,CAACG,IAAN,CAAW,aAAX,EAAyBD,SAAzB,EAAmC;AACtCE,IAAAA,eAAe,EAAE,IADqB,CACf;;AADe,GAAnC,CAAP;AAGH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMtB,IAAI,CAACgB,QAAD,EAAWK,MAAM,CAACE,IAAlB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,UAAMrB,GAAG,CAAC;AAAE;AACRyB,MAAAA,IAAI,EAAElB,cADA;AAENe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOI,KAAP,EAAc;AAAE;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAM1B,GAAG,CAAC;AACNyB,MAAAA,IAAI,EAAEpB;AADA,KAAD,CAAT;AAGH;AACJ;;AAGD,UAAUsB,UAAV,GAAsB;AAClB,QAAM7B,UAAU,CAACQ,cAAD,EAAiBa,KAAjB,CAAhB;AACH;;AAED,SAASS,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B;AACA,SAAOf,KAAK,CAACG,IAAN,CAAW,QAAX,EAAoBY,UAApB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBV,MAAjB,EAAwB;AACpB,MAAI;AACA,UAAMrB,IAAI,CAAC6B,SAAD,EAAYR,MAAM,CAACE,IAAnB,CAAV;AACA,UAAMtB,GAAG,CAAC;AAAE;AACRyB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOa,KAAP,EAAc;AAAE;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAM1B,GAAG,CAAC;AACNyB,MAAAA,IAAI,EAAEd;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUoB,WAAV,GAAuB;AACnB,QAAMjC,UAAU,CAACc,eAAD,EAAkBkB,MAAlB,CAAhB;AACH;;AAED,SAASE,SAAT,GAAqB;AACjB;AACA,SAAOlB,KAAK,CAACG,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AACpCC,IAAAA,eAAe,EAAE;AADmB,GAA/B,CAAP;AAGD;;AAED,UAAUe,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMlC,IAAI,CAACiC,SAAD,CAAV;AACA,UAAMhC,GAAG,CAAC;AAAE;AACVyB,MAAAA,IAAI,EAAEf;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOwB,CAAP,EAAU;AAAE;AACZX,IAAAA,OAAO,CAACG,KAAR,CAAcQ,CAAd;AACA,UAAMlC,GAAG,CAAC;AACRyB,MAAAA,IAAI,EAAEjB,eADE;AAERkB,MAAAA,KAAK,EAAEQ;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUC,WAAV,GAAwB;AACtB,QAAMrC,UAAU,CAACW,eAAD,EAAkBwB,MAAlB,CAAhB;AACD;;AAED,SAASG,WAAT,CAAqBC,MAArB,EAA6B;AAC3B;AACA,SAAOvB,KAAK,CAACwB,GAAN,CAAUD,MAAM,GAAI,SAAQA,MAAO,EAAnB,GAAuB,QAAvC,EAAiD;AACtDnB,IAAAA,eAAe,EAAE;AADqC,GAAjD,CAAP;AAGD;;AAED,UAAUqB,QAAV,CAAmBnB,MAAnB,EAA2B;AACzB,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMtB,IAAI,CAACqC,WAAD,EAAchB,MAAM,CAACE,IAArB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AAAE;AACVyB,MAAAA,IAAI,EAAErB,iBADE;AAERkB,MAAAA,IAAI,EAAED,MAAM,CAACC,IAFL;AAGRkB,MAAAA,EAAE,EAAE,CAACpB,MAAM,CAACE;AAHJ,KAAD,CAAT;AAKD,GARD,CAQE,OAAOY,CAAP,EAAU;AAAE;AACZX,IAAAA,OAAO,CAACG,KAAR,CAAcQ,CAAd;AACA,UAAMlC,GAAG,CAAC;AACRyB,MAAAA,IAAI,EAAEvB,iBADE;AAERwB,MAAAA,KAAK,EAAEQ;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,aAAV,GAA0B;AACxB,QAAM3C,UAAU,CAACK,iBAAD,EAAoBoC,QAApB,CAAhB;AACD;;AAEH,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAM9C,GAAG,CAAC,CACNC,IAAI,CAAC8B,UAAD,CADE,EAEN9B,IAAI,CAACsC,WAAD,CAFE,EAGNtC,IAAI,CAAC4C,aAAD,CAHE,EAIN5C,IAAI,CAACkC,WAAD,CAJE,CAAD,CAAT;AAMH","sourcesContent":["import {all, fork, takeLatest, call, put, delay} from 'redux-saga/effects'\r\nimport {\r\n    LOAD_USER_FAILURE,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n  } from '../reducers/user';\r\n  import axios from 'axios';\r\n\r\nfunction loginAPI(loginData){\r\n    // 서버에 요청을 보내는 부분 \r\n    return axios.post('/user/login',loginData,{\r\n        withCredentials: true, // 쿠기를 다른 도메인으로 보낼때 ->도메인이 다르기떄문에 설정 필요 (front)\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try {\r\n        const result = yield call(loginAPI, action.data);\r\n        console.log(result);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (error) { // loginAPI 실패\r\n        console.log(error);\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login)\r\n}\r\n\r\nfunction signUpAPI(signUPdata){\r\n    // 서버에 요청을 보내는 부분 \r\n    return axios.post('/user/',signUPdata);\r\n}\r\n\r\nfunction* signUp(action){\r\n    try {\r\n        yield call(signUpAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: SIGN_UP_SUCCESS\r\n        });\r\n    } catch (error) { // loginAPI 실패\r\n        console.log(error);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nfunction logOutAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* logOut() {\r\n    try {\r\n      // yield call(logOutAPI);\r\n      yield call(logOutAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_OUT_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n  }\r\n  \r\n  function loadUserAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* loadUser(action) {\r\n    try {\r\n      // yield call(loadUserAPI);\r\n      const result = yield call(loadUserAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_USER_SUCCESS,\r\n        data: result.data,\r\n        me: !action.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadUser() {\r\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n  }\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}