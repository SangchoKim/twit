{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, memo } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from 'antd';\nimport Link from 'next/link';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from '../components/PostImages';\nimport CommentForm from './CommentForm';\nimport moment from 'moment';\nimport PostCardContent from '../components/PostCardContent';\nmoment.locale('ko');\nconst PostCard = memo(({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const onToggleComment = useCallback(() => {\n    // 댓글\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onToggleLike = useCallback(() => {\n    // 좋아요\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    // 리트윗\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onRemovePost = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: userId\n    });\n  });\n  return __jsx(\"div\", null, __jsx(Card, {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(v => v.id === post.User.id) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card // 리트윗을 한 경우\n  , {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(\"span\", {\n    style: {\n      float: 'right'\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD.')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) // a tag x -> Link\n\n  })) : __jsx(Card.Meta, {\n    // 리트윗을 안 한 경우\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) // a tag x -> Link\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n});\nexport default PostCard;","map":{"version":3,"sources":["D:\\NodeBird\\front\\containers\\PostCard.js"],"names":["React","useState","useCallback","useEffect","memo","Card","Icon","Button","Avatar","Form","Input","List","Comment","Popover","Link","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","PostImages","CommentForm","moment","PostCardContent","locale","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onToggleLike","alert","onRetweet","onFollow","userId","onUnfollow","onRemovePost","REMOVE_POST_REQUEST","Images","UserId","RetweetId","User","nickname","Followings","Retweet","float","createdAt","format","pathname","query","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, memo } from 'react';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover  } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, \r\n          LOAD_COMMENTS_REQUEST,\r\n          UNLIKE_POST_REQUEST,\r\n          LIKE_POST_REQUEST,\r\n          RETWEET_REQUEST,\r\n        } from '../reducers/post';\r\nimport { FOLLOW_USER_REQUEST, \r\n        UNFOLLOW_USER_REQUEST,\r\n      } from '../reducers/user'\r\nimport PostImages from '../components/PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport moment from 'moment';\r\nimport PostCardContent from '../components/PostCardContent';\r\n\r\nmoment.locale('ko');\r\n\r\nconst PostCard = memo(({ post }) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onToggleComment = useCallback(() => { // 댓글\r\n    setCommentFormOpened(prev => !prev);\r\n    if(!commentFormOpened){\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n\r\n  const onToggleLike = useCallback(() => { // 좋아요\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다!');\r\n    }\r\n    if (liked) { // 좋아요 누른 상태\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    } else { // 좋아요 안 누른 상태\r\n      dispatch({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, [me && me.id, post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(() => { // 리트윗\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [me && me.id, post && post.id]);\r\n\r\n  const onFollow = useCallback(userId => () => {\r\n    dispatch({\r\n      type: FOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n\r\n  const onUnfollow = useCallback(userId => () => {\r\n    dispatch({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n\r\n  const onRemovePost = useCallback(userId => () => {\r\n    dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: userId,\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n       \r\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n          <Icon type=\"heart\" \r\n                key=\"heart\" \r\n                onClick={onToggleLike} \r\n                theme={liked?'twoTone':'outlined'}\r\n                twoToneColor ='#eb2f96'\r\n                />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"ellipsis\"\r\n            content={(\r\n              <Button.Group>\r\n                {me && post.UserId === me.id\r\n                  ? (\r\n                    <>\r\n                      <Button>수정</Button>\r\n                      <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                    </>\r\n                  )\r\n                  : <Button>신고</Button>}\r\n              </Button.Group>\r\n            )}\r\n          >\r\n            <Icon type=\"ellipsis\" />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n        extra={!me || post.User.id === me.id\r\n          ? null\r\n          : me.Followings && me.Followings.find(v => v.id === post.User.id)\r\n            ? <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button>\r\n            : <Button onClick={onFollow(post.User.id)}>팔로우</Button>\r\n        }\r\n      >\r\n        {post.RetweetId && post.Retweet  \r\n          ? (\r\n            <Card // 리트윗을 한 경우\r\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n            >\r\n            <span style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD.')}</span>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link\r\n                    href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\r\n                    as={`/user/${post.Retweet.User.id}`}\r\n                  >\r\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardContent postData={post.Retweet.content} />} // a tag x -> Link\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <Card.Meta // 리트윗을 안 한 경우\r\n              avatar={(\r\n                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                </Link>\r\n              )}\r\n              title={post.User.nickname}\r\n              description={<PostCardContent postData={post.content} />} // a tag x -> Link\r\n            />\r\n          )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Link href={{pathname: '/user', query:{id:item.User.id }}} as={`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}