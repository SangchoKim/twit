{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport PostCard from '../containers/PostCard';\n\nvar User = function User() {\n  // _app.js에서  props로 내려온 값은 id로 받음 // 4번으로 실행\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n};\n\nUser.prototype = {\n  id: PropTypes.number.isRequired // getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\n  // 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때\n  // 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때 \n\n};\n\nUser.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var id;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 파라미터로 ctx가 들어옴  // 2번으로 실행\n            id = _parseInt(context.query.id, 10);\n            console.log('User getInitalProps', id); // ctx 안에 있는 tag 뽑아냄\n\n            context.store.dispatch({\n              type: LOAD_USER_REQUEST,\n              data: id\n            });\n            context.store.dispatch({\n              type: LOAD_USER_POSTS_REQUEST,\n              data: id\n            });\n            return _context.abrupt(\"return\", {\n              id: id // 리턴하면 _app.js pageProps에 담김\n\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default User;","map":{"version":3,"sources":["D:\\NodeBird\\front\\pages\\user.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","Avatar","Card","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","PostCard","User","dispatch","state","post","mainPosts","user","userInfo","Posts","Followings","Followers","nickname","map","c","id","prototype","number","isRequired","getInitialProps","context","query","console","log","store","type","data"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAE;AACnB,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AADiB,qBAEKC,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFhB;AAAA,MAETC,SAFS,gBAETA,SAFS;;AAAA,sBAGIV,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHf;AAAA,MAGTC,QAHS,iBAGTA,QAHS;;AAMjB,SACE,mBACGA,QAAQ,GAEL,MAAC,IAAD;AACE,IAAA,OAAO,EAAE,CACP;AAAK,MAAA,GAAG,EAAC;AAAT,uBAEE,iBAFF,EAGGA,QAAQ,CAACC,KAHZ,CADO,EAMP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGD,QAAQ,CAACE,UAHZ,CANO,EAWP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGF,QAAQ,CAACG,SAHZ,CAXO;AADX,KAmBE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EAAE,MAAC,MAAD,QAASH,QAAQ,CAACI,QAAT,CAAkB,CAAlB,CAAT,CADV;AAEE,IAAA,KAAK,EAAEJ,QAAQ,CAACI;AAFlB,IAnBF,CAFK,GA2BL,IA5BN,EA6BGN,SAAS,CAACO,GAAV,CAAc,UAAAC,CAAC;AAAA,WACd,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,MAAA,IAAI,EAAED;AAA3B,MADc;AAAA,GAAf,CA7BH,CADF;AAmCD,CAzCD;;AA2CAZ,IAAI,CAACc,SAAL,GAAe;AACXD,EAAAA,EAAE,EAAErB,SAAS,CAACuB,MAAV,CAAiBC,UADV,CAIf;AACA;AACA;;AANe,CAAf;;AAOAhB,IAAI,CAACiB,eAAL;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;AAClCL,YAAAA,EADa,GACR,UAASK,OAAO,CAACC,KAAR,CAAcN,EAAvB,EAA2B,EAA3B,CADQ;AAEnBO,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCR,EAAnC,EAFmB,CAEqB;;AACxCK,YAAAA,OAAO,CAACI,KAAR,CAAcrB,QAAd,CAAuB;AACrBsB,cAAAA,IAAI,EAAEzB,iBADe;AAErB0B,cAAAA,IAAI,EAAEX;AAFe,aAAvB;AAIAK,YAAAA,OAAO,CAACI,KAAR,CAAcrB,QAAd,CAAuB;AACrBsB,cAAAA,IAAI,EAAE1B,uBADe;AAErB2B,cAAAA,IAAI,EAAEX;AAFe,aAAvB;AAPmB,6CAWb;AAACA,cAAAA,EAAE,EAAFA,EAAD,CAAK;;AAAL,aAXa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAcA,eAAeb,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport PostCard from '../containers/PostCard';\r\n\r\nconst User = () => { // _app.js에서  props로 내려온 값은 id로 받음 // 4번으로 실행\r\n  const dispatch = useDispatch();\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const { userInfo } = useSelector(state => state.user);\r\n \r\n  \r\n  return (\r\n    <div>\r\n      {userInfo\r\n        ? (\r\n          <Card\r\n            actions={[\r\n              <div key=\"twit\">\r\n                짹짹\r\n                <br />\r\n                {userInfo.Posts}\r\n              </div>,\r\n              <div key=\"following\">\r\n                팔로잉\r\n                <br />\r\n                {userInfo.Followings}\r\n              </div>,\r\n              <div key=\"follower\">\r\n                팔로워\r\n                <br />\r\n                {userInfo.Followers}\r\n              </div>,\r\n            ]}\r\n          >\r\n            <Card.Meta\r\n              avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n              title={userInfo.nickname}\r\n            />\r\n          </Card>\r\n        )\r\n        : null}\r\n      {mainPosts.map(c => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nUser.prototype={\r\n    id: PropTypes.number.isRequired,\r\n}\r\n\r\n// getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\r\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때\r\n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때 \r\nUser.getInitialProps = async (context) => { // 파라미터로 ctx가 들어옴  // 2번으로 실행\r\n    const id = parseInt(context.query.id, 10);  \r\n    console.log('User getInitalProps', id); // ctx 안에 있는 tag 뽑아냄\r\n    context.store.dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n      data: id,\r\n    });\r\n    context.store.dispatch({\r\n      type: LOAD_USER_POSTS_REQUEST,\r\n      data: id,\r\n    });\r\n    return{id} // 리턴하면 _app.js pageProps에 담김\r\n};\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}