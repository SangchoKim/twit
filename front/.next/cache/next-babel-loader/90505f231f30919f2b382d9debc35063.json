{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../containers/PostForm';\nimport PostCard from '../containers/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n  const onScroll = useCallback(() => {\n    // scrollY = 스크롤 내린 거리 \n    // clientHeight = 화면 높이\n    // scrollHeight: 전체 화면 길이\n    // 전체 화면 까지 스크롤이 도착하기 전 300 정도가 남았을 때 불러오기 \n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        const lastId = mainPosts[mainPosts.length - 1].id; // 마지막 게시글의 id 추출\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n}; // getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때 \n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때 \n\n\nHome.getInitialProps = async context => {\n  console.log(_Object$keys(context)); // context 안에 리덕스의 store가 들어 있음 -> store.dispatch 로 사용 가능 \n  // -> store.getState 로 사용 가능 \n\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["D:\\NodeBird\\front\\pages\\index.js"],"names":["React","useEffect","useCallback","useRef","useSelector","useDispatch","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","Home","me","state","user","mainPosts","hasMorePost","post","dispatch","countRef","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","push","addEventListener","removeEventListener","map","c","getInitialProps","context","console","log","store"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,WAA1B,EAAsCC,MAAtC,QAAoD,OAApD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BV,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACI,IAAhB,CAA9C;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,QAAQ,GAAGd,MAAM,CAAC,EAAD,CAAvB;AAEA,QAAMe,QAAQ,GAAGhB,WAAW,CAAC,MAAM;AACjC;AACA;AACA;AACA;AACA,QAAIiB,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACxG,UAAIV,WAAJ,EAAiB;AACf,cAAMW,MAAM,GAAGZ,SAAS,CAACA,SAAS,CAACa,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAA/C,CADe,CACoC;;AACnD,YAAI,CAACV,QAAQ,CAACW,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAL,EAAwC;AACtCT,UAAAA,QAAQ,CAAC;AACPc,YAAAA,IAAI,EAAEtB,uBADC;AAEPiB,YAAAA;AAFO,WAAD,CAAR;AAIAR,UAAAA,QAAQ,CAACW,OAAT,CAAiBG,IAAjB,CAAsBN,MAAtB;AACD;AACF;AACF;AACF,GAjB2B,EAiBzB,CAACX,WAAD,EAAcD,SAAS,CAACa,MAAxB,CAjByB,CAA5B;AAmBAzB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACL,SAAS,CAACa,MAAX,CALM,CAAT;AAOA,SACE,mBACGhB,EAAE,IAAI,MAAC,QAAD,OADT,EAEGG,SAAS,CAACqB,GAAV,CAAeC,CAAD,IAAO;AACpB,WACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACR,EAAjB;AAAqB,MAAA,IAAI,EAAEQ;AAA3B,MADF;AAGD,GAJA,CAFH,CADF;AAUD,CA1CD,C,CA2CA;AACA;AACA;;;AACA1B,IAAI,CAAC2B,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAYF,OAAZ,CAAZ,EADwC,CAE1C;AACA;;AACAA,EAAAA,OAAO,CAACG,KAAR,CAAcxB,QAAd,CAAuB;AACrBc,IAAAA,IAAI,EAAEtB;AADe,GAAvB;AAGC,CAPD;;AASA,eAAeC,IAAf","sourcesContent":["import React, { useEffect,useCallback,useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PostForm from '../containers/PostForm';\r\nimport PostCard from '../containers/PostCard';\r\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector(state => state.user);\r\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n  const countRef = useRef([]);\r\n\r\n  const onScroll = useCallback(() => {\r\n    // scrollY = 스크롤 내린 거리 \r\n    // clientHeight = 화면 높이\r\n    // scrollHeight: 전체 화면 길이\r\n    // 전체 화면 까지 스크롤이 도착하기 전 300 정도가 남았을 때 불러오기 \r\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n      if (hasMorePost) {\r\n        const lastId = mainPosts[mainPosts.length - 1].id; // 마지막 게시글의 id 추출\r\n        if (!countRef.current.includes(lastId)) {\r\n          dispatch({\r\n            type: LOAD_MAIN_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n          countRef.current.push(lastId);\r\n        }\r\n      }\r\n    }\r\n  }, [hasMorePost, mainPosts.length]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [mainPosts.length]);\r\n\r\n  return (\r\n    <div>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((c) => {\r\n        return (\r\n          <PostCard key={c.id} post={c} />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n// getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\r\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때 \r\n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때 \r\nHome.getInitialProps = async (context) => {\r\n  console.log(Object.keys(context));\r\n// context 안에 리덕스의 store가 들어 있음 -> store.dispatch 로 사용 가능 \r\n// -> store.getState 로 사용 가능 \r\ncontext.store.dispatch({\r\n  type: LOAD_MAIN_POSTS_REQUEST,\r\n});\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}