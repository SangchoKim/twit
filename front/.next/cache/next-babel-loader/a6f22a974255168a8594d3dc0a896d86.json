{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../containers/PostForm';\nimport PostCard from '../containers/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n  const onScroll = useCallback(() => {\n    // scrollY = 스크롤 내린 거리 \n    // clientHeight = 화면 높이\n    // scrollHeight: 전체 화면 길이\n    // 전체 화면 까지 스크롤이 도착하기 전 300 정도가 남았을 때 불러오기 \n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        const lastId = mainPosts[mainPosts.length - 1].id; // 마지막 게시글의 id 추출\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n}; // getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때 \n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때 \n\n\nHome.getInitialProps = async context => {\n  console.log(_Object$keys(context)); // context 안에 리덕스의 store가 들어 있음 -> store.dispatch 로 사용 가능 \n  // -> store.getState 로 사용 가능 \n\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}