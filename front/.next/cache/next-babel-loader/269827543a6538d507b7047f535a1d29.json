{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper'; // next와 리덕스 연결\n\nimport withReduxSaga from 'next-redux-saga'; // next와 리덕스 사가 연결\n\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport App, { Container } from 'next/app';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  // 3번으로 실행\n  return __jsx(Container, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"NodeBird\",\n    htmlAttributes: {\n      lang: 'ko'\n    },\n    meta: [{\n      charset: 'UTF-8'\n    }, {\n      name: 'viewport',\n      content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover'\n    }, {\n      'http-equiv': 'X-UA-Compatible',\n      content: 'IE=edge'\n    }, {\n      name: 'description',\n      content: 'Santos의 NodeBird SNS'\n    }, {\n      name: 'og:title',\n      content: 'NodeBird'\n    }, {\n      name: 'og:description',\n      content: '제로초의 NodeBird SNS'\n    }, {\n      property: 'og:type',\n      content: 'website'\n    }],\n    link: [{\n      rel: 'shortcut icon',\n      href: '/favicon.ico'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; // getInitialProps 서버사이드 렌더링의 핵심 -. 서버&&프론트 둘다 실행\n// 서버쪽에서 실행은 언제? 처음으로 페이지를 불러올때 \n// 프론트쪽에서는 언제 실행? 넥스트 라우터로 페이지를 넘나들때\n\nNodeBird.getInitialProps = async context => {\n  // next 에서 내려주는 context // 1번으로 실행\n  console.log(context);\n  const {\n    ctx,\n    Component\n  } = context; // context 안에는 Component 와 ctx 가 들어있음\n\n  let pageProps = {};\n  const state = ctx.store.getState(); // ctx 안에 리덕스의 store가 들어 있음 -> store.getState 로 사용 가능 \n\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // ctx 안에 리덕스의 req도  들어 있어 cookie 빼올 수 있음 \n\n  axios.defaults.headers.Cookie = '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST // SSR AppLayout 유저 정보 가져오기\n\n    });\n  }\n\n  if (Component.getInitialProps) {\n    // Component안에 getInitialProps 있는 경우\n    pageProps = (await Component.getInitialProps(ctx)) || {}; // 각 componenet 안에서 리턴 받은 값을 pageProps에 넣음\n  }\n\n  return {\n    pageProps\n  }; // nodeBird props로 넘김 \n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 추가 필요 SSR 할때 \n\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));","map":null,"metadata":{},"sourceType":"module"}