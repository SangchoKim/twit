{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분 \n  return axios.post('/user/login', loginData, {\n    withCredentials: true // 쿠기를 다른 도메인으로 보낼때 ->도메인이 다르기떄문에 설정 필요 (front)\n\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    console.log(result);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    // loginAPI 실패\n    console.log(error);\n    yield put({\n      type: LOG_IN_FAILURE,\n      reason: error.response.data && error.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUPdata) {\n  // 서버에 요청을 보내는 부분 \n  return axios.post('/user/', signUPdata);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    // loginAPI 실패\n    console.log(error);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분 \n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줌\n\n  }); // 서버사이드렌더링일 때는, 브라우저가 없어요...\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  try {\n    // yield call(followAPI);\n    const result = yield call(followAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    // yield call(unfollowAPI);\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId, offset = 0, limit = 3) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId || 0}/followers?offset=${offset}&limit=${limit}`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowersAPI, action.data, action.offset);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId, offset = 0, limit = 3) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"offset\", offset);\n  return axios.get(`/user/${userId || 0}/followings?offset=${offset}&limit=${limit}`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowingsAPI, action.data, action.offset);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follower`, {\n    withCredentials: true\n  });\n}\n\nfunction* removeFollower(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeLatest(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n  // 서버에 요청을 보내는 부분\n  return axios.patch('/user/nickname', {\n    nickname\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* editNickname(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeLatest(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchRemoveFollower), fork(watchEditNickname)]);\n}","map":{"version":3,"sources":["D:\\NodeBird\\front\\sagas\\user.js"],"names":["all","fork","takeLatest","call","put","delay","EDIT_NICKNAME_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","REMOVE_FOLLOWER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","axios","loginAPI","loginData","post","withCredentials","login","action","result","data","console","log","type","error","reason","response","watchLogin","signUpAPI","signUPdata","signUp","watchSignUp","logOutAPI","logOut","e","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","followAPI","follow","watchFollow","unfollowAPI","delete","unfollow","watchUnfollow","loadFollowersAPI","offset","limit","loadFollowers","watchLoadFollowers","loadFollowingsAPI","loadFollowings","watchLoadFollowings","removeFollowerAPI","removeFollower","watchRemoveFollower","editNicknameAPI","nickname","patch","editNickname","watchEditNickname","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,QAAsD,oBAAtD;AACA,SACIC,qBADJ,EAEIC,qBAFJ,EAGIC,qBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,iBANJ,EAOIC,cAPJ,EAQIC,cARJ,EASIC,cATJ,EAUIC,eAVJ,EAWIC,eAXJ,EAYIC,eAZJ,EAaIC,eAbJ,EAcIC,eAdJ,EAeIC,eAfJ,EAgBIC,qBAhBJ,EAiBIC,qBAjBJ,EAkBIC,qBAlBJ,EAmBIC,mBAnBJ,EAoBIC,mBApBJ,EAqBIC,mBArBJ,EAsBIC,sBAtBJ,EAuBIC,sBAvBJ,EAwBIC,sBAxBJ,EAyBIC,uBAzBJ,EA0BIC,uBA1BJ,EA2BIC,uBA3BJ,EA4BIC,uBA5BJ,EA6BIC,uBA7BJ,EA8BIC,uBA9BJ,QA+BS,kBA/BT;AAgCE,OAAOC,KAAP,MAAkB,OAAlB;;AAEF,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB;AACA,SAAOF,KAAK,CAACG,IAAN,CAAW,aAAX,EAAyBD,SAAzB,EAAmC;AACtCE,IAAAA,eAAe,EAAE,IADqB,CACf;;AADe,GAAnC,CAAP;AAGH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAACkC,QAAD,EAAWK,MAAM,CAACE,IAAlB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,UAAMvC,GAAG,CAAC;AAAE;AACR2C,MAAAA,IAAI,EAAEjC,cADA;AAEN8B,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOI,KAAP,EAAc;AAAE;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAM5C,GAAG,CAAC;AACN2C,MAAAA,IAAI,EAAEnC,cADA;AAENqC,MAAAA,MAAM,EAAED,KAAK,CAACE,QAAN,CAAeN,IAAf,IAAuBI,KAAK,CAACE,QAAN,CAAeN;AAFxC,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUO,UAAV,GAAsB;AAClB,QAAMjD,UAAU,CAACW,cAAD,EAAiB4B,KAAjB,CAAhB;AACH;;AAED,SAASW,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B;AACA,SAAOjB,KAAK,CAACG,IAAN,CAAW,QAAX,EAAoBc,UAApB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBZ,MAAjB,EAAwB;AACpB,MAAI;AACA,UAAMvC,IAAI,CAACiD,SAAD,EAAYV,MAAM,CAACE,IAAnB,CAAV;AACA,UAAMxC,GAAG,CAAC;AAAE;AACR2C,MAAAA,IAAI,EAAE3B;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAO4B,KAAP,EAAc;AAAE;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAM5C,GAAG,CAAC;AACN2C,MAAAA,IAAI,EAAE7B;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUqC,WAAV,GAAuB;AACnB,QAAMrD,UAAU,CAACiB,eAAD,EAAkBmC,MAAlB,CAAhB;AACH;;AAED,SAASE,SAAT,GAAqB;AACjB;AACA,SAAOpB,KAAK,CAACG,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AACpCC,IAAAA,eAAe,EAAE;AADmB,GAA/B,CAAP;AAGD;;AAED,UAAUiB,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMtD,IAAI,CAACqD,SAAD,CAAV;AACA,UAAMpD,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAE9B;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOyC,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAEhC,eADE;AAERiC,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUC,WAAV,GAAwB;AACtB,QAAMzD,UAAU,CAACc,eAAD,EAAkByC,MAAlB,CAAhB;AACD;;AAED,SAASG,WAAT,CAAqBC,MAArB,EAA6B;AAC3B;AACA,SAAOzB,KAAK,CAAC0B,GAAN,CAAUD,MAAM,GAAI,SAAQA,MAAO,EAAnB,GAAuB,QAAvC,EAAiD;AACtDrB,IAAAA,eAAe,EAAE,IADqC,CAC/B;;AAD+B,GAAjD,CAAP,CAF2B,CAIvB;AACL;;AAED,UAAUuB,QAAV,CAAmBrB,MAAnB,EAA2B;AACzB,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAACyD,WAAD,EAAclB,MAAM,CAACE,IAArB,CAAzB;AACA,UAAMxC,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAEpC,iBADE;AAERiC,MAAAA,IAAI,EAAED,MAAM,CAACC,IAFL;AAGRoB,MAAAA,EAAE,EAAE,CAACtB,MAAM,CAACE;AAHJ,KAAD,CAAT;AAKD,GARD,CAQE,OAAOc,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAEtC,iBADE;AAERuC,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,aAAV,GAA0B;AACxB,QAAM/D,UAAU,CAACQ,iBAAD,EAAoBqD,QAApB,CAAhB;AACD;;AAED,SAASG,SAAT,CAAmBL,MAAnB,EAA2B;AACzB;AACA,SAAOzB,KAAK,CAACG,IAAN,CAAY,SAAQsB,MAAO,SAA3B,EAAqC,EAArC,EAAyC;AAC9CrB,IAAAA,eAAe,EAAE;AAD6B,GAAzC,CAAP;AAGD;;AAED,UAAU2B,MAAV,CAAiBzB,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAAC+D,SAAD,EAAYxB,MAAM,CAACE,IAAnB,CAAzB;AACA,UAAMxC,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAErB,mBADE;AAERkB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAEvB,mBADE;AAERwB,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,WAAV,GAAwB;AACtB,QAAMlE,UAAU,CAACuB,mBAAD,EAAsB0C,MAAtB,CAAhB;AACD;;AAED,SAASE,WAAT,CAAqBR,MAArB,EAA6B;AAC3B;AACA,SAAOzB,KAAK,CAACkC,MAAN,CAAc,SAAQT,MAAO,SAA7B,EAAuC;AAC5CrB,IAAAA,eAAe,EAAE;AAD2B,GAAvC,CAAP;AAGD;;AAED,UAAU+B,QAAV,CAAmB7B,MAAnB,EAA2B;AACzB,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAACkE,WAAD,EAAc3B,MAAM,CAACE,IAArB,CAAzB;AACA,UAAMxC,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAExB,qBADE;AAERqB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAE1B,qBADE;AAER2B,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUc,aAAV,GAA0B;AACxB,QAAMtE,UAAU,CAACoB,qBAAD,EAAwBiD,QAAxB,CAAhB;AACD;;AACD,SAASE,gBAAT,CAA0BZ,MAA1B,EAAkCa,MAAM,GAAG,CAA3C,EAA8CC,KAAK,GAAG,CAAtD,EAAyD;AACvD;AACA,SAAOvC,KAAK,CAAC0B,GAAN,CAAW,SAAQD,MAAM,IAAE,CAAE,qBAAoBa,MAAO,UAASC,KAAM,EAAvE,EAA0E;AAC/EnC,IAAAA,eAAe,EAAE;AAD8D,GAA1E,CAAP;AAGD;;AAED,UAAUoC,aAAV,CAAwBlC,MAAxB,EAAgC;AAC9B,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAACsE,gBAAD,EAAmB/B,MAAM,CAACE,IAA1B,EAAgCF,MAAM,CAACgC,MAAvC,CAAzB;AACA,UAAMtE,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAElB,sBADE;AAERe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAEpB,sBADE;AAERqB,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUmB,kBAAV,GAA+B;AAC7B,QAAM3E,UAAU,CAAC0B,sBAAD,EAAyBgD,aAAzB,CAAhB;AACD;;AAED,SAASE,iBAAT,CAA2BjB,MAA3B,EAAmCa,MAAM,GAAG,CAA5C,EAA+CC,KAAK,GAAG,CAAvD,EAA0D;AACxD;AACA9B,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqB4B,MAArB;AACA,SAAOtC,KAAK,CAAC0B,GAAN,CAAW,SAAQD,MAAM,IAAE,CAAE,sBAAqBa,MAAO,UAASC,KAAM,EAAxE,EAA2E;AAChFnC,IAAAA,eAAe,EAAE;AAD+D,GAA3E,CAAP;AAGD;;AAED,UAAUuC,cAAV,CAAyBrC,MAAzB,EAAiC;AAC/B,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAAC2E,iBAAD,EAAoBpC,MAAM,CAACE,IAA3B,EAAiCF,MAAM,CAACgC,MAAxC,CAAzB;AACA,UAAMtE,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAEf,uBADE;AAERY,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAEjB,uBADE;AAERkB,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUsB,mBAAV,GAAgC;AAC9B,QAAM9E,UAAU,CAAC6B,uBAAD,EAA0BgD,cAA1B,CAAhB;AACD;;AAED,SAASE,iBAAT,CAA2BpB,MAA3B,EAAmC;AACjC;AACA,SAAOzB,KAAK,CAACkC,MAAN,CAAc,SAAQT,MAAO,WAA7B,EAAyC;AAC9CrB,IAAAA,eAAe,EAAE;AAD6B,GAAzC,CAAP;AAGD;;AAED,UAAU0C,cAAV,CAAyBxC,MAAzB,EAAiC;AAC/B,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAAC8E,iBAAD,EAAoBvC,MAAM,CAACE,IAA3B,CAAzB;AACA,UAAMxC,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAEZ,uBADE;AAERS,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAEd,uBADE;AAERe,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUyB,mBAAV,GAAgC;AAC9B,QAAMjF,UAAU,CAACgC,uBAAD,EAA0BgD,cAA1B,CAAhB;AACD;;AAED,SAASE,eAAT,CAAyBC,QAAzB,EAAmC;AACjC;AACA,SAAOjD,KAAK,CAACkD,KAAN,CAAY,gBAAZ,EAA8B;AAAED,IAAAA;AAAF,GAA9B,EAA4C;AACjD7C,IAAAA,eAAe,EAAE;AADgC,GAA5C,CAAP;AAGD;;AAED,UAAU+C,YAAV,CAAuB7C,MAAvB,EAA+B;AAC7B,MAAI;AACF;AACA,UAAMC,MAAM,GAAG,MAAMxC,IAAI,CAACiF,eAAD,EAAkB1C,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAMxC,GAAG,CAAC;AAAE;AACV2C,MAAAA,IAAI,EAAEvC,qBADE;AAERoC,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACZb,IAAAA,OAAO,CAACG,KAAR,CAAcU,CAAd;AACA,UAAMtD,GAAG,CAAC;AACR2C,MAAAA,IAAI,EAAEzC,qBADE;AAER0C,MAAAA,KAAK,EAAEU;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAU8B,iBAAV,GAA8B;AAC5B,QAAMtF,UAAU,CAACK,qBAAD,EAAwBgF,YAAxB,CAAhB;AACD;;AAEH,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMzF,GAAG,CAAC,CACNC,IAAI,CAACkD,UAAD,CADE,EAENlD,IAAI,CAAC0D,WAAD,CAFE,EAGN1D,IAAI,CAACgE,aAAD,CAHE,EAINhE,IAAI,CAACsD,WAAD,CAJE,EAKNtD,IAAI,CAACmE,WAAD,CALE,EAMNnE,IAAI,CAACuE,aAAD,CANE,EAONvE,IAAI,CAAC4E,kBAAD,CAPE,EAQN5E,IAAI,CAAC+E,mBAAD,CARE,EASN/E,IAAI,CAACkF,mBAAD,CATE,EAUNlF,IAAI,CAACuF,iBAAD,CAVE,CAAD,CAAT;AAYH","sourcesContent":["import {all, fork, takeLatest, call, put, delay} from 'redux-saga/effects'\r\nimport {\r\n    EDIT_NICKNAME_FAILURE, \r\n    EDIT_NICKNAME_REQUEST,\r\n    EDIT_NICKNAME_SUCCESS,\r\n    LOAD_USER_FAILURE,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    UNFOLLOW_USER_FAILURE,\r\n    UNFOLLOW_USER_REQUEST,\r\n    UNFOLLOW_USER_SUCCESS,\r\n    FOLLOW_USER_FAILURE,\r\n    FOLLOW_USER_REQUEST,\r\n    FOLLOW_USER_SUCCESS,\r\n    LOAD_FOLLOWERS_FAILURE,\r\n    LOAD_FOLLOWERS_REQUEST,\r\n    LOAD_FOLLOWERS_SUCCESS,\r\n    LOAD_FOLLOWINGS_FAILURE, \r\n    LOAD_FOLLOWINGS_REQUEST,\r\n    LOAD_FOLLOWINGS_SUCCESS,\r\n    REMOVE_FOLLOWER_FAILURE, \r\n    REMOVE_FOLLOWER_REQUEST, \r\n    REMOVE_FOLLOWER_SUCCESS,\r\n  } from '../reducers/user';\r\n  import axios from 'axios';\r\n\r\nfunction loginAPI(loginData){\r\n    // 서버에 요청을 보내는 부분 \r\n    return axios.post('/user/login',loginData,{\r\n        withCredentials: true, // 쿠기를 다른 도메인으로 보낼때 ->도메인이 다르기떄문에 설정 필요 (front)\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try {\r\n        const result = yield call(loginAPI, action.data);\r\n        console.log(result);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (error) { // loginAPI 실패\r\n        console.log(error);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            reason: error.response.data && error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login)\r\n}\r\n\r\nfunction signUpAPI(signUPdata){\r\n    // 서버에 요청을 보내는 부분 \r\n    return axios.post('/user/',signUPdata);\r\n}\r\n\r\nfunction* signUp(action){\r\n    try {\r\n        yield call(signUpAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: SIGN_UP_SUCCESS\r\n        });\r\n    } catch (error) { // loginAPI 실패\r\n        console.log(error);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nfunction logOutAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* logOut() {\r\n    try {\r\n      // yield call(logOutAPI);\r\n      yield call(logOutAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_OUT_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n  }\r\n  \r\n  function loadUserAPI(userId) {\r\n    // 서버에 요청을 보내는 부분 \r\n    return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n      withCredentials: true, // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줌\r\n    }); // 서버사이드렌더링일 때는, 브라우저가 없어요...\r\n  }\r\n  \r\n  function* loadUser(action) {\r\n    try {\r\n      // yield call(loadUserAPI);\r\n      const result = yield call(loadUserAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_USER_SUCCESS,\r\n        data: result.data,\r\n        me: !action.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadUser() {\r\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n  }\r\n\r\n  function followAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post(`/user/${userId}/follow`, {}, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* follow(action) {\r\n    try {\r\n      // yield call(followAPI);\r\n      const result = yield call(followAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: FOLLOW_USER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: FOLLOW_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchFollow() {\r\n    yield takeLatest(FOLLOW_USER_REQUEST, follow);\r\n  }\r\n  \r\n  function unfollowAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.delete(`/user/${userId}/follow`, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* unfollow(action) {\r\n    try {\r\n      // yield call(unfollowAPI);\r\n      const result = yield call(unfollowAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: UNFOLLOW_USER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: UNFOLLOW_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_USER_REQUEST, unfollow);\r\n  }\r\n  function loadFollowersAPI(userId, offset = 0, limit = 3) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get(`/user/${userId||0}/followers?offset=${offset}&limit=${limit}`, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* loadFollowers(action) {\r\n    try {\r\n      // yield call(loadFollowersAPI);\r\n      const result = yield call(loadFollowersAPI, action.data, action.offset);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_FOLLOWERS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_FOLLOWERS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadFollowers() {\r\n    yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\r\n  }\r\n  \r\n  function loadFollowingsAPI(userId, offset = 0, limit = 3) {\r\n    // 서버에 요청을 보내는 부분\r\n    console.log(\"offset\",offset);\r\n    return axios.get(`/user/${userId||0}/followings?offset=${offset}&limit=${limit}`, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* loadFollowings(action) {\r\n    try {\r\n      // yield call(loadFollowersAPI);\r\n      const result = yield call(loadFollowingsAPI, action.data, action.offset);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_FOLLOWINGS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_FOLLOWINGS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadFollowings() {\r\n    yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\r\n  }\r\n  \r\n  function removeFollowerAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.delete(`/user/${userId}/follower`, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* removeFollower(action) {\r\n    try {\r\n      // yield call(loadFollowersAPI);\r\n      const result = yield call(removeFollowerAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: REMOVE_FOLLOWER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: REMOVE_FOLLOWER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchRemoveFollower() {\r\n    yield takeLatest(REMOVE_FOLLOWER_REQUEST, removeFollower);\r\n  }\r\n\r\n  function editNicknameAPI(nickname) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.patch('/user/nickname', { nickname }, {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* editNickname(action) {\r\n    try {\r\n      // yield call(loadFollowersAPI);\r\n      const result = yield call(editNicknameAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: EDIT_NICKNAME_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: EDIT_NICKNAME_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchEditNickname() {\r\n    yield takeLatest(EDIT_NICKNAME_REQUEST, editNickname);\r\n  }\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLoadFollowers),\r\n        fork(watchLoadFollowings),\r\n        fork(watchRemoveFollower),\r\n        fork(watchEditNickname),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}